/*
 * CashDrawerReportDialog.java
 *
 * Created on August 24, 2006, 11:20 PM
 */

package com.pinpos.ui.dialog;

import com.pinpos.Messages;
import com.pinpos.main.Application;
import com.pinpos.model.DrawerPullReport;
import com.pinpos.model.DrawerPullVoidTicketEntry;
import com.pinpos.model.Terminal;
import com.pinpos.model.User;
import com.pinpos.model.dao.TerminalDAO;
import com.pinpos.print.DrawerpullReportService;
import com.pinpos.print.PosPrintService;
import com.pinpos.swing.PosButton;
import com.pinpos.ui.TitlePanel;
import com.pinpos.util.NumberUtil;
import net.miginfocom.swing.MigLayout;
import org.apache.ecs.Document;
import org.apache.ecs.html.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;

/**
 *
 * @author  MShahriar
 */
public class DrawerPullReportDialog extends POSDialog {
    private SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMMM, yyyy");
    private DrawerPullReport drawerPullReport;
    private Terminal terminal;

    public DrawerPullReportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, false);
        initComponents();
    }

    public void initialize() throws Exception {
        terminal = Application.getInstance().getTerminal();

        drawerPullReport = DrawerpullReportService.buildDrawerPullReport();

        taReport.setContentType("text/html");
        taReport.setEditable(false);
        taReport.setMargin(new Insets(0,10,0,10));
        taReport.setText(createReport());
        taReport.setCaretPosition(0);

        taReport.setPreferredSize(new Dimension(360,100));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        setLayout(new BorderLayout(5,5));

        titlePanel1 = new TitlePanel();
        add(titlePanel1, BorderLayout.NORTH);

        taReport = new JEditorPane();
        taReport.setContentType("text/html");

        add(new JScrollPane(taReport));

        JPanel buttonPanel = new JPanel(new MigLayout("fill","","[fill, grow][]"));

        buttonPanel.add(new JSeparator(), "grow,span,wrap");
        buttonPanel.add(btnPrint = new PosButton("PRINT"), "w 120, h 50, grow");
        buttonPanel.add(btnResetCashDrawer = new PosButton("RESET DRAWER"), "w 120, h 50, grow");
        buttonPanel.add(btnFinish = new PosButton("CLOSE"), "w 120, h 50, grow");

        add(buttonPanel, BorderLayout.SOUTH);

        btnFinish.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                btnFinishActionPerformed();
            }
        });
        btnResetCashDrawer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                btnResetCashDrawerActionPerformed();
            }
        });
        btnPrint.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                try {
                    PosPrintService.printDrawerPullReport(drawerPullReport, terminal);
                } catch (Exception ex) {
                    POSMessageDialog.showError(DrawerPullReportDialog.this, "Error while printing\n" + ex.getMessage());
                    ex.printStackTrace();
                }

            }

        });
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetCashDrawerActionPerformed() {//GEN-FIRST:event_btnResetCashDrawerActionPerformed
        int option = JOptionPane.showOptionDialog(this, "Sure reset cash drawer?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if(option != JOptionPane.YES_OPTION) return;

        Application app = Application.getInstance();
        Terminal terminal = app.getTerminal();
        User user = Application.getCurrentUser();

        TerminalDAO dao = new TerminalDAO();
        try {
            dao.resetCashDrawer(drawerPullReport, terminal, user);
        } catch (Exception e) {
            POSMessageDialog.showError("Cannot save", e);
        }
    }//GEN-LAST:event_btnResetCashDrawerActionPerformed

    private void btnFinishActionPerformed() {//GEN-FIRST:event_btnFinishActionPerformed
        dispose();
    }//GEN-LAST:event_btnFinishActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new DrawerPullReportDialog(new javax.swing.JFrame(), true).setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.pinpos.swing.PosButton btnFinish;
    private com.pinpos.swing.PosButton btnPrint;
    private com.pinpos.swing.PosButton btnResetCashDrawer;
    private javax.swing.JEditorPane taReport;
    private com.pinpos.ui.TitlePanel titlePanel1;
    // End of variables declaration//GEN-END:variables

    void createReportHeader(Document document) {
        P p = new P();
        //p.addElement(new Font().addAttribute("size", "7"));
        p.addAttribute("align", "center");
        p.addElement("===================================");
        p.addElement(new BR());
        p.addElement(Messages.getString("PosMessage.28"));
        p.addElement(new BR());
        p.addElement("===================================");
        document.appendBody(p);
    }

    void createSectionHeader(Document document, String headerText) {
        P p = new P();
        p.addAttribute("align", "center");
        p.addElement(headerText);
        p.addElement(new HR());
        document.appendBody(p);
    }

    void addSeparator(Document document) {
        P p = new P();
        HR hr = new HR();
        hr.addAttribute("style", "border: dashed;");
        p.addElement(hr);
        document.appendBody(p);
    }

    void addTableSeparator(Table table) {
        TR tr = new TR();
        TD td = new TD();
        td.addAttribute("colspan", 2);
        td.addAttribute("align", "right");
        HR hr = new HR();
        hr.addAttribute("style", "border: dashed;");
        td.addElement(hr);
        tr.addElement(td);
        table.addElement(tr);
    }

    void addExceptionTableSeparator(Table table) {
        TR tr = new TR();
        TD td = new TD();
        td.addAttribute("colspan", 5);
        td.addAttribute("align", "right");
        HR hr = new HR();
        hr.addAttribute("style", "border: dashed;");
        td.addElement(hr);
        tr.addElement(td);
        table.addElement(tr);
    }

    void addTableRow(Table table, String column1, String coulmn2) {
        TR tr = new TR();
        tr.addElement(new TD().addElement(column1));
        tr.addElement(new TD().addAttribute("align", "right").addElementToRegistry(coulmn2));
        table.addElement(tr);
    }

    void addDiscountTableRow(Table table, String column1, String coulmn2) {
        TR tr = new TR();
        tr.addElement(new TD().addAttribute("style", "padding-left: 50px;").addElementToRegistry(column1));
        tr.addElement(new TD().addAttribute("align", "right").addElementToRegistry(coulmn2));
        table.addElement(tr);
    }

    void addExceptionTableRow(Table table, String column1, String coulmn2, String coulmn3, String coulmn4, String column5) {
        TR tr = new TR();
        TD td = new TD();
        td.addAttribute("valign", "top");
        td.addElement(column1);
        tr.addElement(td);

        td = new TD();
        td.addAttribute("valign", "top");
        td.addElement(coulmn2);
        tr.addElement(td);

        td = new TD();
        td.addAttribute("valign", "top");
        td.addAttribute("align", "right");
        td.addElement(coulmn3);
        tr.addElement(td);

        td = new TD();
        td.addAttribute("valign", "top");
        td.addAttribute("align", "right");
        td.addElement(coulmn4);
        tr.addElement(td);

        td = new TD();
        td.addAttribute("valign", "top");
        td.addAttribute("align", "right");
        td.addElement(column5);
        tr.addElement(td);

        table.addElement(tr);
    }

    public String createReport() throws Exception {
        Document document = new Document();

        Table table;

        createReportHeader(document);

        P p = new P();
        p.addElement("Time: " + dateFormat.format(new Date()));
        document.appendBody(p);


        createSectionHeader(document, " "+Messages.getString("PosMessage.418")+" ");
        table = new Table();
        table.addAttribute("width", "100%");
        addTableRow(table, "&nbsp;"+Messages.getString("PosMessage.404"), NumberUtil.formatToCurrency(drawerPullReport.getNetSales()));
        addTableRow(table, "+"+Messages.getString("PosMessage.405"), NumberUtil.formatToCurrency(drawerPullReport.getSalesTax()));
        addTableRow(table, "="+Messages.getString("PosMessage.406"), NumberUtil.formatToCurrency(drawerPullReport.getTotalRevenue()));
        addTableRow(table, "+"+Messages.getString("PosMessage.407"), NumberUtil.formatToCurrency(drawerPullReport.getChargedTips()));
        addTableSeparator(table);
        addTableRow(table, "="+Messages.getString("PosMessage.419"), NumberUtil.formatToCurrency(drawerPullReport.getGrossReceipts()));
        document.appendBody(table);

        document.appendBody(new BR());

        table = new Table();
        table.addAttribute("width", "100%");
        addTableRow(table, "-"+Messages.getString("PosMessage.408")+" (" + drawerPullReport.getCashReceiptNumber() + ")", NumberUtil.formatToCurrency(drawerPullReport.getCashReceiptAmount()));
        addTableRow(table, "-"+Messages.getString("PosMessage.409")+"  (" + drawerPullReport.getCreditCardReceiptNumber() + ")", NumberUtil.formatToCurrency(drawerPullReport.getCreditCardReceiptAmount()));
        addTableRow(table, "-"+Messages.getString("PosMessage.410")+"   (" + drawerPullReport.getDebitCardReceiptNumber() + ")", NumberUtil.formatToCurrency(drawerPullReport.getDebitCardReceiptAmount()));
        addTableRow(table, "-"+Messages.getString("PosMessage.411")+"  (" + drawerPullReport.getGiftCertReturnCount() + ")", NumberUtil.formatToCurrency(drawerPullReport.getGiftCertReturnAmount()));
        addTableRow(table, "+"+Messages.getString("PosMessage.412"), NumberUtil.formatToCurrency(drawerPullReport.getGiftCertChangeAmount()));
        addTableRow(table, "+"+Messages.getString("PosMessage.413"), NumberUtil.formatToCurrency(drawerPullReport.getCashBack()));
        addTableSeparator(table);
        addTableRow(table, "="+Messages.getString("PosMessage.414"), NumberUtil.formatToCurrency(drawerPullReport.getReceiptDifferential()));
        document.appendBody(table);

        document.appendBody(new BR());

        table = new Table();
        table.addAttribute("width", "100%");
        addTableRow(table, "+"+Messages.getString("PosMessage.407"), NumberUtil.formatToCurrency(drawerPullReport.getChargedTips()));
        addTableRow(table, "-"+Messages.getString("PosMessage.415"), NumberUtil.formatToCurrency(drawerPullReport.getTipsPaid()));
        addTableSeparator(table);
        addTableRow(table, "="+Messages.getString("PosMessage.416"), NumberUtil.formatToCurrency(drawerPullReport.getTipsDifferential()));
        document.appendBody(table);

        document.appendBody(new BR());

        createSectionHeader(document, " "+Messages.getString("PosMessage.420")+" ");
        table = new Table();
        table.addAttribute("width", "100%");
        addTableRow(table, Messages.getString("PosMessage.417")+"  (" + drawerPullReport.getCashReceiptNumber() + ")", NumberUtil.formatToCurrency(drawerPullReport.getCashReceiptAmount()));
        //addTableRow(table, "CASH TAX", decimalFormat.format(drawerPullReport.getCashTax()));
        addTableRow(table, "-"+Messages.getString("PosMessage.415"), NumberUtil.formatToCurrency(drawerPullReport.getTipsPaid()));
        addTableRow(table, "-"+Messages.getString("PosMessage.421")+"       (" + drawerPullReport.getPayOutNumber() + ")", NumberUtil.formatToCurrency(drawerPullReport.getPayOutAmount()));
        addTableRow(table, "-"+Messages.getString("PosMessage.413"), NumberUtil.formatToCurrency(drawerPullReport.getCashBack()));
        addTableRow(table, "+"+Messages.getString("PosMessage.422"), NumberUtil.formatToCurrency(terminal.getOpeningBalance()));
        addTableRow(table, "-"+Messages.getString("PosMessage.166")+"  (" + drawerPullReport.getDrawerBleedNumber() + ")", NumberUtil.formatToCurrency(drawerPullReport.getDrawerBleedAmount()));
        addTableSeparator(table);
        addTableRow(table, "="+Messages.getString("PosMessage.423"), NumberUtil.formatToCurrency(drawerPullReport.getDrawerAccountable()));
        addTableRow(table, ">"+Messages.getString("PosMessage.424"), NumberUtil.formatToCurrency(drawerPullReport.getCashToDeposit()));
        document.appendBody(table);

        createSectionHeader(document, "=== "+Messages.getString("PosMessage.425")+" ===");
        createSectionHeader(document, "=== "+Messages.getString("PosMessage.426")+" ===");
        table = new Table();
        table.addAttribute("width", "100%");
        addExceptionTableRow(table, "CODE", "REASON", "WAST", "QTY", "AMOUNT");
        addExceptionTableSeparator(table);

        //CONDITIONAL
        Set<DrawerPullVoidTicketEntry> voidTickets = drawerPullReport.getVoidTickets();
        if(voidTickets != null) {
            for (DrawerPullVoidTicketEntry entry : voidTickets) {
                addExceptionTableRow(table, String.valueOf(entry.getCode()), entry.getReason(), " ", String.valueOf(entry.getQuantity()), NumberUtil.formatNumber(entry.getAmount()));
            }
        }
        addExceptionTableSeparator(table);
        document.appendBody(table);

        table = new Table();
        table.addAttribute("width", "100%");
        addTableRow(table, Messages.getString("PosMessage.430"), NumberUtil.formatToCurrency(drawerPullReport.getTotalVoidWst()));
        addTableRow(table, Messages.getString("total.voids"), NumberUtil.formatToCurrency(drawerPullReport.getTotalVoid()));

        document.appendBody(table);

        createSectionHeader(document, "=== " + Messages.getString("discounts.coupons") + " ===");
        table = new Table();
        document.appendBody(table);
        table.addAttribute("width", "100%");
        addTableRow(table, Messages.getString("total.discount.coupon"), "");
        addDiscountTableRow(table, Messages.getString("total.count"), String.valueOf(drawerPullReport.getTotalDiscountCount()));
        addDiscountTableRow(table, Messages.getString("total.dsct"), NumberUtil.formatToCurrency(drawerPullReport.getTotalDiscountAmount()));
        addDiscountTableRow(table, Messages.getString("total.sales"), NumberUtil.formatToCurrency(drawerPullReport.getTotalDiscountSales()));
        addDiscountTableRow(table, Messages.getString("total.guest"), String.valueOf(drawerPullReport.getTotalDiscountGuest()));
        addDiscountTableRow(table, Messages.getString("party.size"), String.valueOf(drawerPullReport.getTotalDiscountPartySize()));
        addDiscountTableRow(table, Messages.getString("check.size"), String.valueOf(drawerPullReport.getTotalDiscountCheckSize()));
        addDiscountTableRow(table, Messages.getString("count"), String.valueOf(" "));
        addDiscountTableRow(table, Messages.getString("ratio"), String.valueOf(" "));

        return document.toString();
    }

    public void setTitle(String title) {
        titlePanel1.setTitle(title);
        super.setTitle(title);
    }
}
