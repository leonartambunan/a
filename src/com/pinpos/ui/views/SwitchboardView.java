package com.pinpos.ui.views;

import com.pinpos.Messages;
import com.pinpos.POSConstants;
import com.pinpos.PosException;
import com.pinpos.actions.SettleTicketAction;
import com.pinpos.bo.ui.BackOfficeWindow;
import com.pinpos.config.AppConfig;
import com.pinpos.extension.OrderServiceExtension;
import com.pinpos.main.Application;
import com.pinpos.model.*;
import com.pinpos.model.dao.AttendenceHistoryDAO;
import com.pinpos.model.dao.TicketDAO;
import com.pinpos.services.TicketService;
import com.pinpos.swing.PosButton;
import com.pinpos.ui.dialog.*;
import com.pinpos.ui.report.DailyTxnReport;
import com.pinpos.ui.report.ReportViewer;
import com.pinpos.ui.views.order.DefaultOrderServiceExtension;
import com.pinpos.ui.views.order.OrderView;
import com.pinpos.ui.views.order.RootView;
import com.pinpos.ui.views.payment.SettleTicketView;
import com.pinpos.util.NumberUtil;
import com.pinpos.util.TicketAlreadyExistsException;
import net.miginfocom.swing.MigLayout;
import org.apache.commons.logging.LogFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;

/**
 *
 * @author MShahriar
 */
public class SwitchboardView extends JPanel implements ActionListener {
    public final static String VIEW_NAME = com.pinpos.POSConstants.SWITCHBOARD;

    private OrderServiceExtension orderServiceExtension;

    public static SwitchboardView instance;

    //	private Timer ticketListUpdater;

    /** Creates new form SwitchboardView */
    public SwitchboardView() {
        initComponents();

        btnSalesReport.addActionListener(this);
        btnBackOffice.addActionListener(this);
        btnClockOut.addActionListener(this);
        btnEditTicket.addActionListener(this);

        if (!"false".equals(AppConfig.getFeatureGroupTicketFlag())) {
            btnGroupSettle.addActionListener(this);
        }

        btnLogout.addActionListener(this);

        if (!"false".equals(AppConfig.getManagerMenuFlag())) {
            btnManager.addActionListener(this);
        }

        btnNewTicket.addActionListener(this);

        if (!"false".equals(AppConfig.getFeaturePenarikanFlag())) {
            btnPayout.addActionListener(this);
        }

        btnOrderInfo.addActionListener(this);
        btnReopenTicket.addActionListener(this);
        btnSettleTicket.addActionListener(this);
        btnShutdown.addActionListener(this);

        if (!"false".equals(AppConfig.getFeatureSplitTicketFlag())) {
            btnSplitTicket.addActionListener(this);
        }

        btnTakeout.addActionListener(this);
        btnVoidTicket.addActionListener(this);

        orderServiceExtension = Application.getPluginManager().getPlugin(OrderServiceExtension.class);

        if (orderServiceExtension == null) {
//            btnHomeDelivery.setEnabled(false);
//            btnPickup.setEnabled(false);
//            btnDriveThrough.setEnabled(false);
//            btnAssignDriver.setEnabled(false);
//            btnCloseOrder.setEnabled(false);

            orderServiceExtension = new DefaultOrderServiceExtension();
        }
        //		ticketListUpdater = new Timer(30 * 1000, new TicketListUpdaterTask());

        applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));

        instance = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed"
    // desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel statusPanel = new javax.swing.JPanel();
        lblUserName = new javax.swing.JLabel();
        javax.swing.JPanel bottomPanel = new javax.swing.JPanel();
        javax.swing.JPanel bottomLeftPanel = new javax.swing.JPanel();
        openTicketList = new com.pinpos.ui.TicketListView();
        javax.swing.JPanel activityPanel = new javax.swing.JPanel();
        btnNewTicket = new com.pinpos.swing.PosButton();
        btnEditTicket = new com.pinpos.swing.PosButton();
        btnVoidTicket = new com.pinpos.swing.PosButton();
        btnPayout = new com.pinpos.swing.PosButton();
        btnOrderInfo = new com.pinpos.swing.PosButton();
        javax.swing.JPanel bottomRightPanel = new javax.swing.JPanel();
        btnShutdown = new com.pinpos.swing.PosButton();
        btnLogout = new com.pinpos.swing.PosButton();
        btnBackOffice = new com.pinpos.swing.PosButton();
        btnSalesReport = new com.pinpos.swing.PosButton();
        btnManager = new com.pinpos.swing.PosButton();
        btnClockOut = new com.pinpos.swing.PosButton();

        setLayout(new java.awt.BorderLayout(10, 10));

        lblUserName.setFont(new java.awt.Font("Tahoma", 1, 18));
        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusPanel.add(lblUserName, java.awt.BorderLayout.PAGE_START);

        add(statusPanel, java.awt.BorderLayout.NORTH);

        bottomPanel.setLayout(new java.awt.BorderLayout(5, 5));

        bottomLeftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, POSConstants.OPEN_TICKETS_AND_ACTIVITY,
                javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        bottomLeftPanel.setLayout(new java.awt.BorderLayout(5, 5));
        bottomLeftPanel.add(openTicketList, java.awt.BorderLayout.CENTER);

        activityPanel.setPreferredSize(new java.awt.Dimension(655, 150));
        activityPanel.setLayout(new java.awt.GridLayout(3, 0, 5, 5));

        btnNewTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new_ticket_32.png")));
        btnNewTicket.setText(POSConstants.DINE_IN);
        activityPanel.add(btnNewTicket);
        btnTakeout = new com.pinpos.swing.PosButton();

        btnTakeout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/take_away.png")));
        btnTakeout.setText(POSConstants.CAPITAL_TAKE_OUT);
        activityPanel.add(btnTakeout);

//        btnPickup = new PosButton();
//        btnPickup.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                doHomeDelivery(Ticket.PICKUP);
//            }
//        });
//        btnPickup.setText(POSConstants.PICKUP);
//        activityPanel.add(btnPickup);

//        btnHomeDelivery = new PosButton();
//        btnHomeDelivery.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                doHomeDelivery(Ticket.HOME_DELIVERY);
//            }
//        });
//        btnHomeDelivery.setText(POSConstants.HOME_DELIVERY);
//        activityPanel.add(btnHomeDelivery);

/*
        btnDriveThrough = new PosButton();
        btnDriveThrough.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                doTakeout(Ticket.DRIVE_THROUGH);
            }
        });
        btnDriveThrough.setText(POSConstants.DRIVE_THRU);
        activityPanel.add(btnDriveThrough);
*/

        btnEditTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit_ticket_32.png")));
        btnEditTicket.setText(POSConstants.CAPITAL_EDIT);
        activityPanel.add(btnEditTicket);
        btnSettleTicket = new com.pinpos.swing.PosButton();

        btnSettleTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settle_ticket_32.png")));
        btnSettleTicket.setText(POSConstants.CAPITAL_SETTLE);
        activityPanel.add(btnSettleTicket);

        if (!"false".equals(AppConfig.getFeatureGroupTicketFlag())) {
            btnGroupSettle = new com.pinpos.swing.PosButton();
            btnGroupSettle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settle_ticket_32.png")));
            btnGroupSettle.setText("<html><body>" + POSConstants.CAPITAL_SETTLE + "<br>" + POSConstants.CAPITAL_GROUP + "</body></html>");
            activityPanel.add(btnGroupSettle);
        }

        if (!"false".equals(AppConfig.getFeatureSplitTicketFlag())) {
            btnSplitTicket = new com.pinpos.swing.PosButton();
            btnSplitTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/split_32.png")));
            btnSplitTicket.setText(POSConstants.CAPITAL_SPLIT);
            activityPanel.add(btnSplitTicket);
        }

        btnReopenTicket = new com.pinpos.swing.PosButton();

        btnReopenTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit_ticket_32.png")));
        btnReopenTicket.setText(POSConstants.CAPITAL_RE_OPEN);
        activityPanel.add(btnReopenTicket);

        btnVoidTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/void_ticket_32.png")));
        btnVoidTicket.setText(POSConstants.CAPITAL_VOID);
        activityPanel.add(btnVoidTicket);

        if (!"false".equals(AppConfig.getFeaturePenarikanFlag())) {
            btnPayout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pay_32.png")));
            btnPayout.setText(POSConstants.CAPITAL_PAY_OUT);
            activityPanel.add(btnPayout);
        }

        btnOrderInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png")));
        btnOrderInfo.setText(POSConstants.ORDER_INFO);
        activityPanel.add(btnOrderInfo);

        bottomLeftPanel.add(activityPanel, java.awt.BorderLayout.SOUTH);

//        btnAssignDriver = new PosButton();
//        btnAssignDriver.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                doAssignDriver();
//            }
//        });
//        btnAssignDriver.setText("<html>PILIH<br/>PENGANTAR</html>");
//        activityPanel.add(btnAssignDriver);
//
//        btnCloseOrder = new PosButton();
//        btnCloseOrder.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                doCloseOrder();
//            }
//        });
//        btnCloseOrder.setText(POSConstants.CLOSE_ORDER);
//        activityPanel.add(btnCloseOrder);

        bottomPanel.add(bottomLeftPanel, java.awt.BorderLayout.CENTER);

        bottomRightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LAIN-LAIN", javax.swing.border.TitledBorder.CENTER,
                javax.swing.border.TitledBorder.DEFAULT_POSITION));
        bottomRightPanel.setPreferredSize(new java.awt.Dimension(180, 10));

        btnShutdown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/shut_down_32.png")));
        btnShutdown.setText(POSConstants.CAPITAL_SHUTDOWN);

        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/log_out_32.png")));
        btnLogout.setText(POSConstants.CAPITAL_LOGOUT);

        btnBackOffice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back_office.png")));
        btnBackOffice.setText(POSConstants.CAPITAL_BACK_OFFICE);

        btnSalesReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/salesreport.png")));
        btnSalesReport.setText(POSConstants.CAPITAL_SALES_REPORT);

        if( ! "false".equalsIgnoreCase(AppConfig.getManagerMenuFlag())) {
            btnManager.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user_32.png")));
            btnManager.setText(POSConstants.CAPITAL_MANAGER);
        }

        btnClockOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/log_out_32.png")));
        btnClockOut.setText(POSConstants.CAPITAL_CLOCK_OUT);

        bottomPanel.add(bottomRightPanel, java.awt.BorderLayout.EAST);
        bottomRightPanel.setLayout(new MigLayout("aligny bottom, insets 1 2 1 2, gapy 10", "[170px]", "[][][][][]"));
        bottomRightPanel.add(btnShutdown, "cell 0 5,grow");
        bottomRightPanel.add(btnLogout, "cell 0 4,grow");
        bottomRightPanel.add(btnSalesReport, "cell 0 3,grow");
        bottomRightPanel.add(btnClockOut, "cell 0 2,grow");
        bottomRightPanel.add(btnBackOffice, "cell 0 1,grow");

        if( ! "false".equalsIgnoreCase(AppConfig.getManagerMenuFlag())) {
            bottomRightPanel.add(btnManager, "cell 0 0,grow");
        }

        add(bottomPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    protected void doCloseOrder() {
        Ticket ticket = getFirstSelectedTicket();

        if (orderServiceExtension.finishOrder(ticket.getId())) {
            updateTicketList();
        }
    }

    protected void doAssignDriver() {
        try {

            Ticket ticket = getFirstSelectedTicket();

//			if(ticket == null) {
//				return;
//			}

            if (!Ticket.HOME_DELIVERY.equals(ticket.getTicketType())) {
                POSMessageDialog.showError("Driver can be assigned only for Home Delivery");
                return;
            }

            User assignedDriver = ticket.getAssignedDriver();
            if (assignedDriver != null) {
                int option = JOptionPane.showOptionDialog(Application.getPosWindow(), "Driver already assigned. Do you want to reassign?", "Confirm",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

                if (option != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            orderServiceExtension.assignDriver(ticket.getId());
        } catch (Exception e) {
            e.printStackTrace();
            POSMessageDialog.showError(e.getMessage());
            LogFactory.getLog(SwitchboardView.class).error(e);
        }
    }

    private void doReopenTicket() {
        try {

            int ticketId = NumberSelectionDialog2.takeIntInput(POSConstants.ENTER_TICKET_ID);

            if (ticketId == -1) {
                return;
            }

            Ticket ticket = TicketService.getTicket(ticketId);

            if (ticket == null) {
                throw new PosException(POSConstants.NO_TICKET_WITH_ID + " " + ticketId + " " + POSConstants.FOUND);
            }

            if (!ticket.isClosed()) {
                throw new PosException(POSConstants.TICKET_IS_NOT_CLOSED);
            }

            String ticketTotalAmount = Application.getCurrencySymbol() + " " + NumberUtil.formatToCurrency(ticket.getTotalAmount());
            String amountMessage = "<span style='color: red; font-weight: bold;'>" + ticketTotalAmount + "</span>";
            String message = "<html><body>Ticket amount is " + ticketTotalAmount
                    + ". To reopen ticket, you need to refund that amount to system.<br/>Please press <b>OK</b> after you refund amount " + amountMessage
                    + "</body></html>";

            int option = JOptionPane.showOptionDialog(this, message, "Alert!", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
            if (option != JOptionPane.OK_OPTION) {
                return;
            }

            TicketService.refundTicket(ticket);
            editTicket(ticket);

        } catch (PosException e) {
            POSMessageDialog.showError(this, e.getLocalizedMessage());
        } catch (Exception e) {
            POSMessageDialog.showError(this, POSConstants.ERROR_MESSAGE, e);
        }
    }

    private void doClockOut() {
        int option = JOptionPane.showOptionDialog(this, POSConstants.CONFIRM_CLOCK_OUT, POSConstants.CONFIRM, JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (option != JOptionPane.YES_OPTION) {
            return;
        }

        User user = Application.getCurrentUser();
        AttendenceHistoryDAO attendenceHistoryDAO = new AttendenceHistoryDAO();
        AttendenceHistory attendenceHistory = attendenceHistoryDAO.findHistoryByClockedInTime(user);
        if (attendenceHistory == null) {
            attendenceHistory = new AttendenceHistory();
            Date lastClockInTime = user.getLastClockInTime();
            Calendar c = Calendar.getInstance();
            c.setTime(lastClockInTime);
            attendenceHistory.setClockInTime(lastClockInTime);
            attendenceHistory.setClockInHour((short) c.get(Calendar.HOUR));
            attendenceHistory.setUser(user);
            attendenceHistory.setTerminal(Application.getInstance().getTerminal());
            attendenceHistory.setShift(user.getCurrentShift());
        }

        Shift shift = user.getCurrentShift();
        Calendar calendar = Calendar.getInstance();

        user.doClockOut(attendenceHistory, shift, calendar);

        Application.getInstance().logout();
    }

    private synchronized void doShowSalesReport() {

        BackOfficeWindow window = BackOfficeWindow.getInstance();
        JTabbedPane tabbedPane = window.getTabbedPane();

        ReportViewer viewer = null;
//        int index = tabbedPane.indexOfTab(com.pinpos.POSConstants.SALES_REPORT);
        int index = tabbedPane.indexOfTab(Messages.getString("Daily.Txn"));
        if (index == -1) {
//            viewer = new ReportViewer(new SalesReport());
            viewer = new ReportViewer(new DailyTxnReport());
//            tabbedPane.addTab(POSConstants.SALES_REPORT, viewer);
            tabbedPane.addTab(Messages.getString("Daily.Txn"), viewer);
        } else {
            viewer = (ReportViewer) tabbedPane.getComponentAt(index);
        }
        tabbedPane.setSelectedComponent(viewer);

        window.setVisible(true);
    }


    private synchronized void doShowBackoffice() {
        BackOfficeWindow window = BackOfficeWindow.getInstance();
        if (window == null) {
            window = new BackOfficeWindow();
            Application.getInstance().setBackOfficeWindow(window);
        }
        window.setVisible(true);
        window.toFront();
    }

    private void doShutdown() {
        Application.getInstance().shutdownPOS();
    }

    private void doLogout() {
        Application.getInstance().logout();
    }

    private void doSettleTicket() {
        try {

            List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
            if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
                POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_SETTLE);
                return;
            }

            Ticket ticket = selectedTickets.get(0);

            new SettleTicketAction(ticket.getId()).execute();

            updateTicketList();

        } catch (Exception e) {
            POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
        }
    }

    private void doShowOrderInfo() {
        try {
            List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
            if (selectedTickets.size() == 0) {
                POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_PRINT);
                return;
            }

            List<Ticket> ticketsToShow = new ArrayList<Ticket>();

            for (int i = 0; i < selectedTickets.size(); i++) {
                Ticket ticket = selectedTickets.get(i);
                ticketsToShow.add(TicketDAO.getInstance().loadFullTicket(ticket.getId()));
            }

            OrderInfoView view = new OrderInfoView(ticketsToShow);
            OrderInfoDialog dialog = new OrderInfoDialog(view);
            dialog.setSize(400, 600);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialog.setLocationRelativeTo(Application.getPosWindow());
            dialog.setVisible(true);

        } catch (Exception e) {
            e.printStackTrace();
        }

        //		Ticket ticket = selectedTickets.get(0);
        //		try {
        //			ticket = TicketDAO.getInstance().initializeTicket(ticket);
        //			ticket.calculateDefaultGratutity();
        //
        //			PosPrintService.printTicket(ticket, 0);
        //
        //			// PRINT ACTION
        //			String actionMessage = "CHK#" + ":" + ticket.getId();
        //			ActionHistoryDAO.getInstance().saveHistory(Application.getCurrentUser(), ActionHistory.PRINT_CHECK, actionMessage);
        //		} catch (Exception e) {
        //			POSMessageDialog.showError(this, e.getMessage(), e);
        //		}
    }

    private void doVoidTicket() {
        try {
            Ticket selectedTicket = getFirstSelectedTicket();

            if (selectedTicket == null) {
                return;
            }

            if (!selectedTicket.getTotalAmount().equals(selectedTicket.getDueAmount())) {
                POSMessageDialog.showMessage(POSConstants.PARTIAL_PAID_VOID_ERROR);
                return;
            }

            Ticket ticketToVoid = TicketDAO.getInstance().loadFullTicket(selectedTicket.getId());

            VoidTicketDialog voidTicketDialog = new VoidTicketDialog(Application.getPosWindow(), true);
            voidTicketDialog.setTicket(ticketToVoid);
            voidTicketDialog.open();

            if (!voidTicketDialog.isCanceled()) {
                updateView();
            }
        } catch (Exception e) {
            POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
        }
    }

    private void doSplitTicket() {
        try {
            Ticket selectedTicket = getFirstSelectedTicket();

            if (selectedTicket == null) {
                return;
            }

            if (!selectedTicket.getTotalAmount().equals(selectedTicket.getDueAmount())) {
                POSMessageDialog.showMessage(POSConstants.PARTIAL_PAID_VOID_ERROR);
                return;
            }

            // initialize the ticket.
            Ticket ticket = TicketDAO.getInstance().loadFullTicket(selectedTicket.getId());

            SplitTicketDialog dialog = new SplitTicketDialog();
            dialog.setTicket(ticket);
            dialog.open();

            updateView();
        } catch (Exception e) {
            POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
        }
    }

    private void doEditTicket() {
        List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
        if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
            POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_EDIT);
            return;
        }

        Ticket ticket = selectedTickets.get(0);

        editTicket(ticket);
    }

    private void editTicket(Ticket ticket) {
        if (ticket.isPaid()) {
            POSMessageDialog.showMessage("Tiket yang sudah terbayar tidak dapat diedit lagi");
            return;
        }

        Ticket ticketToEdit = TicketDAO.getInstance().loadFullTicket(ticket.getId());
        OrderView.getInstance().setCurrentTicket(ticketToEdit);

        RootView.getInstance().showView(OrderView.VIEW_NAME);
    }

    private void doCreateNewTicket(final String ticketType) {
        try {

            OrderServiceExtension orderService = new DefaultOrderServiceExtension();

            orderService.createNewTicket(ticketType);

        } catch (TicketAlreadyExistsException e) {

            int option = JOptionPane.showOptionDialog(Application.getPosWindow(), POSConstants.EDIT_TICKET_CONFIRMATION, POSConstants.CONFIRM,
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (option == JOptionPane.YES_OPTION) {
                editTicket(e.getTicket());
                return;
            }
        }
    }

    protected void doHomeDelivery(String ticketType) {
        try {

            orderServiceExtension.createNewTicket(ticketType);

        } catch (TicketAlreadyExistsException e) {

            int option = JOptionPane.showOptionDialog(Application.getPosWindow(), POSConstants.EDIT_TICKET_CONFIRMATION, POSConstants.CONFIRM,
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (option == JOptionPane.YES_OPTION) {
                editTicket(e.getTicket());
                return;
            }
        }
    }

    private void doTakeout(String titcketType) {
        Application application = Application.getInstance();

        Ticket ticket = new Ticket();
        //ticket.setPriceIncludesTax(application.isPriceIncludesTax());
        ticket.setTableNumber(-1);
        ticket.setTicketType(titcketType);
        ticket.setTerminal(application.getTerminal());
        ticket.setOwner(Application.getCurrentUser());
        ticket.setShift(application.getCurrentShift());

        Calendar currentTime = Calendar.getInstance();
        ticket.setCreateDate(currentTime.getTime());
        ticket.setCreationHour(currentTime.get(Calendar.HOUR_OF_DAY));

        OrderView.getInstance().setCurrentTicket(ticket);
        RootView.getInstance().showView(OrderView.VIEW_NAME);
    }

    private void doPayout() {
        PayoutDialog dialog = new PayoutDialog(Application.getPosWindow(), true);
        dialog.open();
    }

    private void doShowManagerWindow() {
        ManagerDialog dialog = new ManagerDialog();
        dialog.open();
    }

    private void doGroupSettle() {
        List<Ticket> selectedTickets = getSelectedTickets();
        if (selectedTickets == null) {
            return;
        }

        List<Ticket> ticketsToSettle = new ArrayList<Ticket>();

        for (int i = 0; i < selectedTickets.size(); i++) {
            Ticket ticket = selectedTickets.get(i);

            Ticket fullTicket = TicketDAO.getInstance().loadFullTicket(ticket.getId());
            ticketsToSettle.add(fullTicket);
        }

        SettleTicketView posDialog = new SettleTicketView();
        posDialog.setTicketsToSettle(ticketsToSettle);
        posDialog.setSize(800, 600);
        posDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        posDialog.open();
    }

    public void updateView() {
        User user = Application.getCurrentUser();
        UserType userType = user.getNewUserType();
        if (userType != null) {
            Set<UserPermission> permissions = userType.getPermissions();
            if (permissions != null) {
                btnNewTicket.setEnabled(false);
                btnBackOffice.setEnabled(false);
                btnEditTicket.setEnabled(false);

                if( ! "false".equalsIgnoreCase(AppConfig.getFeatureGroupTicketFlag())) {
                    btnGroupSettle.setEnabled(false);
                }

                if( ! "false".equalsIgnoreCase(AppConfig.getManagerMenuFlag())) {
                    btnManager.setEnabled(false);
                }

                if( ! "false".equalsIgnoreCase(AppConfig.getFeaturePenarikanFlag())) {
                    btnPayout.setEnabled(false);
                }

                btnReopenTicket.setEnabled(false);
                btnSettleTicket.setEnabled(false);

                if( ! "false".equalsIgnoreCase(AppConfig.getFeatureSplitTicketFlag())) {
                    btnSplitTicket.setEnabled(false);
                }

                btnTakeout.setEnabled(false);
                btnVoidTicket.setEnabled(false);

                for (UserPermission permission : permissions) {
                    if (permission.equals(UserPermission.VOID_TICKET)) {
                        btnVoidTicket.setEnabled(true);
                    }
                    else if (permission.equals(UserPermission.PAY_OUT)) {
                        if( ! "false".equalsIgnoreCase(AppConfig.getFeaturePenarikanFlag())) {
                            btnPayout.setEnabled(true);
                        }
                    }
                    else if (permission.equals(UserPermission.SETTLE_TICKET)) {
                        btnSettleTicket.setEnabled(true);
                        if( ! "false".equalsIgnoreCase(AppConfig.getFeatureGroupTicketFlag())) {
                            btnGroupSettle.setEnabled(true);
                        }
                    }
                    else if (permission.equals(UserPermission.REOPEN_TICKET)) {
                        btnReopenTicket.setEnabled(true);
                    }
                    else if (permission.equals(UserPermission.PERFORM_MANAGER_TASK)) {
                        if( ! "false".equalsIgnoreCase(AppConfig.getManagerMenuFlag())) {
                            btnManager.setEnabled(true);
                        }
                    }
                    else if (permission.equals(UserPermission.SPLIT_TICKET)) {
                        if( ! "false".equalsIgnoreCase(AppConfig.getFeatureSplitTicketFlag())) {
                            btnSplitTicket.setEnabled(true);
                        }
                    }
                    else if (permission.equals(UserPermission.TAKE_OUT)) {
                        btnTakeout.setEnabled(true);
                    }
                    else if (permission.equals(UserPermission.VIEW_BACK_OFFICE)) {
                        btnBackOffice.setEnabled(true);
                    }
//                    else if (permission.equals(UserPermission.PAY_OUT)) {
//                        btnPayout.setEnabled(true);
//                    }
                    else if (permission.equals(UserPermission.EDIT_TICKET)) {
                        btnEditTicket.setEnabled(true);
                    }
                    else if (permission.equals(UserPermission.CREATE_NEW_TICKET)) {
                        btnNewTicket.setEnabled(true);
                    }
                }
            }
        }

        updateTicketList();
    }

    public void updateTicketList() {
        User user = Application.getCurrentUser();

        TicketDAO dao = TicketDAO.getInstance();
        List<Ticket> openTickets;

        boolean showAllOpenTicket = false;
        if (user.getNewUserType() != null) {
            Set<UserPermission> permissions = user.getNewUserType().getPermissions();
            if (permissions != null) {
                for (UserPermission permission : permissions) {
                    if (permission.equals(UserPermission.VIEW_ALL_OPEN_TICKET)) {
                        showAllOpenTicket = true;
                        break;
                    }
                }
            }
        }

        if (showAllOpenTicket) {
            openTickets = dao.findOpenTickets();
        }
        else {
            openTickets = dao.findOpenTicketsForUser(user);
        }
        openTicketList.setTickets(openTickets);

        lblUserName.setText(POSConstants.WELCOME + " " + user.toString() + ". " + POSConstants.YOU + " " + POSConstants.HAVE + " " + openTickets.size() + " "+ POSConstants.TICKETS);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.pinpos.swing.PosButton btnSalesReport;
    private com.pinpos.swing.PosButton btnBackOffice;
    private com.pinpos.swing.PosButton btnClockOut;
    private com.pinpos.swing.PosButton btnEditTicket;
    private com.pinpos.swing.PosButton btnGroupSettle;
    private com.pinpos.swing.PosButton btnLogout;
    private com.pinpos.swing.PosButton btnManager;
    private com.pinpos.swing.PosButton btnNewTicket;
    private com.pinpos.swing.PosButton btnPayout;
    private com.pinpos.swing.PosButton btnOrderInfo;
    private com.pinpos.swing.PosButton btnReopenTicket;
    private com.pinpos.swing.PosButton btnSettleTicket;
    private com.pinpos.swing.PosButton btnShutdown;
    private com.pinpos.swing.PosButton btnSplitTicket;
    private com.pinpos.swing.PosButton btnTakeout;
    private com.pinpos.swing.PosButton btnVoidTicket;
    private javax.swing.JLabel lblUserName;
    private com.pinpos.ui.TicketListView openTicketList;
    private PosButton btnPickups;
    private PosButton btnHomeDeliverys;
    private PosButton btnDriveThroughs;
    private PosButton btnAssignDrivers;
    private PosButton btnCloseOrders;

    // End of variables declaration//GEN-END:variables

    @Override
    public void setVisible(boolean aFlag) {
        super.setVisible(aFlag);

        if (aFlag) {
            updateView();
        }
    }

    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == btnSalesReport) {
            doShowSalesReport();
        }

        if (source == btnBackOffice) {
            doShowBackoffice();
        }
        if (source == btnClockOut) {
            doClockOut();
        }
        if (source == btnEditTicket) {
            doEditTicket();
        }
        if (source == btnGroupSettle) {
            doGroupSettle();
        }
        if (source == btnLogout) {
            doLogout();
        }
        if (source == btnManager) {
            doShowManagerWindow();
        }
        if (source == btnNewTicket) {
            doCreateNewTicket(Ticket.DINE_IN);
        }
        if (source == btnPayout) {
            doPayout();
        }
        if (source == btnOrderInfo) {
            doShowOrderInfo();
        }
        if (source == btnReopenTicket) {
            doReopenTicket();
        }
        if (source == btnSettleTicket) {
            doSettleTicket();
        }
        if (source == btnShutdown) {
            doShutdown();
        }
        if (source == btnSplitTicket) {
            doSplitTicket();
        }
        if (source == btnTakeout) {
            doTakeout(Ticket.TAKE_OUT);
        }
        if (source == btnVoidTicket) {
            doVoidTicket();
        }
    }

    private Ticket getFirstSelectedTicket() {
        List<Ticket> selectedTickets = openTicketList.getSelectedTickets();

        if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
            POSMessageDialog.showMessage("Silahkan pilih tiket");
            return null;
        }

        return selectedTickets.get(0);
    }

    private List<Ticket> getSelectedTickets() {
        List<Ticket> selectedTickets = openTicketList.getSelectedTickets();

        if (selectedTickets.size() == 0) {
            POSMessageDialog.showMessage("Silahkan pilih sedikitnya satu tiket");
            return null;
        }

        return selectedTickets;
    }

    //	private class TicketListUpdaterTask implements ActionListener {
    //
    //		public void actionPerformed(ActionEvent e) {
    //			updateTicketList();
    //		}
    //
    //	}
}
